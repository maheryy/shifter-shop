generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  firstname       String            @db.VarChar(255)
  lastname        String            @db.VarChar(255)
  password        String            @db.VarChar(255)
  role            Role              @default(Customer)
  profileId       String?           @unique
  profile         Profile?          @relation(fields: [profileId], references: [id])
  reviews         Review[]
  orders          Order[]
  createdProducts Product[]
  cartProducts    CustomerProduct[]
  status          Status            @default(Default)

  @@map("users")
}

model Profile {
  id      String  @id @default(uuid())
  phone   String? @db.VarChar(255)
  address String? @db.VarChar(255)
  user    User?
  status  Status  @default(Default)

  @@map("profiles")
}

model Product {
  id          String            @id @default(uuid())
  name        String            @db.VarChar(255)
  description String            @db.VarChar(255)
  rating      Float             @default(0)
  price       Float
  image       String            @db.VarChar(255)
  category    Category          @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  customers   CustomerProduct[]
  orders      OrderProduct[]
  status      Status            @default(Default)
  seller      User              @relation(fields: [sellerId], references: [id])
  sellerId    String

  @@index([categoryId])
  @@map("products")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @db.VarChar(255)
  products Product[]

  @@map("categories")
}

model Review {
  id        String   @id @default(uuid())
  title     String?  @db.VarChar(255)
  details   String?  @db.VarChar(255)
  rating    Int
  date      DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  status    Status   @default(Default)

  @@map("reviews")
}

model CustomerProduct {
  quantity   Int
  customer   User    @relation(fields: [customerId], references: [id])
  customerId String
  product    Product @relation(fields: [productId], references: [id])
  productId  String

  @@id([customerId, productId])
  @@map("customer_products")
}

model OrderProduct {
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([orderId, productId])
  @@map("order_products")
}

model Order {
  id         String         @id @default(uuid())
  reference  String         @unique
  total      Float
  date       DateTime       @default(now())
  status     OrderStatus    @default(Pending)
  customer   User           @relation(fields: [customerId], references: [id])
  customerId String
  products   OrderProduct[]
  reviews    Review[]
  payment    Payment?

  @@map("orders")
}

model Payment {
  id      String        @id
  date    DateTime      @default(now())
  status  PaymentStatus @default(Pending)
  order   Order         @relation(fields: [orderId], references: [id])
  orderId String        @unique

  @@map("payments")
}

enum Role {
  Admin
  Seller
  Customer
}

enum OrderStatus {
  Pending
  Confirmed
  Shipping
  Delivered
  Cancelled
}

enum PaymentStatus {
  Pending
  Confirmed
  Refused
  Deleted
}

enum Status {
  Default
  Deleted
}
